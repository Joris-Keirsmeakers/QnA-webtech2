#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var discussions = require('../models/discussions.js')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// primus!
var Primus = require('primus');
var primus = new Primus(server);
primus.on('connection', function (spark) {
    spark.on("data",function (data){
      console.log("data",data)
      if(!!data && data.subject){
        setTimeout(function(){
          discussions.findOne({"subject":data.subject}).sort({_id: -1})
            .exec(function(err,discussion){
            console.log("discussion",discussion)
            if (discussion) {
              primus.write(discussion)
            }
          })
        },500)
      }

      if(data.id && data.qfield){
        console.log("check")
        setTimeout(function(){
          discussions.find({_id: data.id}, function(err,question){
            console.log("discussion",question)
            if (question) {
            primus.write(question)
            }
          })
        },500)
      }

      if(data.id && data.comment){
        setTimeout(function(){
          console.log("primus make fancy comments work!")
          discussions.findOne({"questions._id":data.id}, function(err,comment){
            console.log("discussion",comment)
            /*if (comment) {
              primus.write(comment)
            }*/
          })
        },500)}

        if(data.lock){
          console.log("locking thread")
          discussions.update({ _id: data.lock},{$set:{locked: true}},
              function (err,locked) {
                if(err){
                  console.log(err);

                }
                console.log(locked)
                primus.write(locked)
              });
              console.log("locked")

      }


    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
